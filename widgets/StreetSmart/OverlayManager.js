function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}define(['dojo/_base/Color','dojo/on','dojo/_base/array','esri/request','esri/geometry/Point','esri/geometry/Multipoint','esri/geometry/Polygon','esri/geometry/ScreenPoint','esri/geometry/Extent','esri/graphic','esri/symbols/SimpleMarkerSymbol','esri/symbols/SimpleLineSymbol','esri/symbols/SimpleFillSymbol','esri/renderers/SimpleRenderer','esri/layers/GraphicsLayer','esri/SpatialReference','./arcgisToGeojson','./utils','./SldFactory'],function(Color,on,dojoArray,esriRequest,Point,Multipoint,Polygon,ScreenPoint,Extent,Graphic,SimpleMarkerSymbol,SimpleLineSymbol,SimpleFillSymbol,SimpleRenderer,GraphicsLayer,SpatialReference,geoJsonUtils,utils,SLD){return function(){function LayerManager(_ref){var map=_ref.map,wkid=_ref.wkid,config=_ref.config,StreetSmartApi=_ref.StreetSmartApi,widget=_ref.widget;_classCallCheck(this,LayerManager);this.map=map;this.widget=widget;this.wkid=wkid;this.config=config;this.api=StreetSmartApi;this.defaultSymbol={color:{r:223,g:115,b:255,a:1},size:11,type:'simplemarkersymbol',style:'square',xoffset:0,yoffset:0,outline:{color:{r:26,g:26,b:26,a:1},width:2,type:'simplelinesymbol',style:'solid'}};this.overlays=[];this.overlaysByName={};this.requestQueue=[];this.requestID=0;this.isQueueLoading=false;this.reloadQueueOnFinish=false;//  Can be used to listen to visibility changes in the layer list.
// this._bindLayerChangeListeners();
}LayerManager.prototype.addStreetNameLayer=function addStreetNameLayer(){var streetNameByLocale={'fr':'Noms de rue','de':'Stra\xDFennamen','nl':'Straatnamen','en-US':'Street names','en-EN':'Street names'};if(this.config.showStreetName){var overlay=this.api.addOverlay({name:streetNameByLocale[this.config.locale],geojson:{type:'FeatureCollection',features:[],crs:{type:'EPSG',properties:{code:3857}}}});return overlay.id}return null};LayerManager.prototype._bindLayerChangeListeners=function _bindLayerChangeListeners(){var _this=this;var onChange=function onChange(){return _this.addOverlaysToViewer()};var nonLoadedLayers=[];var mapLayers=_.values(this.map._layers);var featureLayers=_.filter(mapLayers,function(l){return l.type==='Feature Layer'});var _loop=function _loop(layer){layer.on('visibility-change',function(info){if(layer.graphics.length===0&&!layer.hasZ){nonLoadedLayers.push(layer.id)}else{_this.widget._panoramaViewer.toggleOverlay({id:_this.overlaysByName[layer.name],visible:!info.visible,name:layer.name})}});layer.on('update-end',function(){if(nonLoadedLayers.includes(layer.id)){onChange();nonLoadedLayers.splice(nonLoadedLayers.indexOf(layer.id),1)}})};for(var _iterator=featureLayers,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref2;if(_isArray){if(_i>=_iterator.length)break;_ref2=_iterator[_i++]}else{_i=_iterator.next();if(_i.done)break;_ref2=_i.value}var layer=_ref2;_loop(layer)}};LayerManager.prototype.addOverlaysToViewer=function addOverlaysToViewer(){var _this2=this;if(this.widget.config.overlays===false)return;this.removeOverlays();this.isQueueLoading=false;this.reloadQueueOnFinish=false;var mapLayers=_.values(this.map._layers);var featureLayers=_.filter(mapLayers,function(l){return l.type==='Feature Layer'});var ID=++this.requestID;var extent=this._calcRecordingExtent();var requestBundle={ID:ID,extent:extent,req:[]};_.each(featureLayers,function(mapLayer){if(mapLayer.hasZ&&mapLayer.version>10.8){var requestObj={mapLayer:mapLayer,overlayID:null};requestBundle.req.push(requestObj)}else if(!mapLayer.hasZ&&mapLayer.graphics.length===0&&mapLayer.visible===false){var _requestObj={mapLayer:mapLayer,overlayID:null};requestBundle.req.push(_requestObj)}else{var geojson=_this2.createGeoJsonForFeature({mapLayer:mapLayer});var sld=new SLD(mapLayer,geojson);geojson=_this2.applyDefaultCaseIfNeeded(geojson,sld);if(sld.xml===undefined){return}var overlay=_this2.api.addOverlay({// sourceSrs: 'EPSG:3857',  // Broken in API
name:mapLayer.name,sldXMLtext:sld.xml,geojson:geojson,visible:false});var oldId=_this2.widget._mapIdLayerId.hasOwnProperty(mapLayer.id)?_this2.widget._mapIdLayerId[mapLayer.id]:undefined;_this2.widget._mapIdLayerId[mapLayer.id]=overlay.id;var layerVisible=oldId&&_this2.widget._visibleLayers.hasOwnProperty(oldId)?_this2.widget._visibleLayers[oldId]:mapLayer.visible;if(_this2.widget._visibleLayers.hasOwnProperty(oldId)){delete _this2.widget._visibleLayers[oldId]}_this2.widget._visibleLayers[overlay.id]=layerVisible;_this2.widget._panoramaViewer.toggleOverlay({id:overlay.id,visible:!layerVisible,name:mapLayer.name});_this2.overlaysByName[mapLayer.name]=overlay.id;_this2.overlays.push(overlay.id)}});this.requestQueue.push(requestBundle);this._loadQueue()};LayerManager.prototype._loadQueue=function _loadQueue(){var _this3=this;if(this.isQueueLoading){this.reloadQueueOnFinish=true}else{(function(){_this3.isQueueLoading=true;var item=_this3.requestQueue.pop();// if no item is present it is probably already being loaded, its just that multiple requestBundles triggered the loading of the most recent.
if(item){var _loop2=function _loop2(request){var token=request.mapLayer.credential&&request.mapLayer.credential.token;var knownFeatureIds=[];for(var _iterator3=request.mapLayer.toJson().featureSet.features,_isArray3=Array.isArray(_iterator3),_i3=0,_iterator3=_isArray3?_iterator3:_iterator3[Symbol.iterator]();;){var _ref4;if(_isArray3){if(_i3>=_iterator3.length)break;_ref4=_iterator3[_i3++]}else{_i3=_iterator3.next();if(_i3.done)break;_ref4=_i3.value}var reqFeature=_ref4;knownFeatureIds.push(reqFeature.attributes[request.mapLayer.objectIdField])}var options={url:request.mapLayer.url+'/query?',content:{f:'json',returnGeometry:true,returnZ:true,outFields:'*',objectIds:[].concat(knownFeatureIds),outSR:_this3.wkid}};if(token)options.content.token=token;esriRequest(options).then(function(r){_this3._handleRequest(r,item,request)})};for(var _iterator2=item.req,_isArray2=Array.isArray(_iterator2),_i2=0,_iterator2=_isArray2?_iterator2:_iterator2[Symbol.iterator]();;){var _ref3;if(_isArray2){if(_i2>=_iterator2.length)break;_ref3=_iterator2[_i2++]}else{_i2=_iterator2.next();if(_i2.done)break;_ref3=_i2.value}var request=_ref3;_loop2(request)}_this3.requestQueue=[]}})()}};LayerManager.prototype._handleRequest=function _handleRequest(result,requestBundle,request){if(this.reloadQueueOnFinish&&!requestBundle.isComplete){this.isQueueLoading=false;requestBundle.isComplete=true;this._loadQueue()}else if(this.reloadQueueOnFinish===false){var mapLayer=request.mapLayer;try{var wkid=result.spatialReference&&result.spatialReference.wkid;var info=void 0;if(wkid&&result.features.length){info=this.createGeoJsonForFeature({mapLayer:mapLayer,wkid:wkid,featureSet:result})}else{// Bad result bypass:
//request.overlayID = 'No wkid or features found.';
info=this.createGeoJsonForFeature({mapLayer:mapLayer})}var sld=new SLD(mapLayer,info);info=this.applyDefaultCaseIfNeeded(info,sld);if(sld.xml===undefined){return}var overlay=this.api.addOverlay({// sourceSrs: 'EPSG:3857',  // Broken in API
name:mapLayer.name,sldXMLtext:sld.xml,geojson:info,visible:false});var oldId=this.widget._mapIdLayerId.hasOwnProperty(mapLayer.id)?this.widget._mapIdLayerId[mapLayer.id]:undefined;this.widget._mapIdLayerId[mapLayer.id]=overlay.id;var layerVisible=oldId&&this.widget._visibleLayers.hasOwnProperty(oldId)?this.widget._visibleLayers[oldId]:mapLayer.visible;if(this.widget._visibleLayers.hasOwnProperty(oldId)){delete this.widget._visibleLayers[oldId]}this.widget._visibleLayers[overlay.id]=layerVisible;request.overlayID=overlay;this.widget._panoramaViewer.toggleOverlay({id:overlay.id,visible:!layerVisible,name:mapLayer.name});this.overlaysByName[mapLayer.name]=overlay.id;this.overlays.push(overlay.id);var isBundleComplete=true;for(var _iterator4=requestBundle.req,_isArray4=Array.isArray(_iterator4),_i4=0,_iterator4=_isArray4?_iterator4:_iterator4[Symbol.iterator]();;){var _ref5;if(_isArray4){if(_i4>=_iterator4.length)break;_ref5=_iterator4[_i4++]}else{_i4=_iterator4.next();if(_i4.done)break;_ref5=_i4.value}var reg=_ref5;if(!reg.overlayID){isBundleComplete=false;break}}if(isBundleComplete){this.isQueueLoading=false}}catch(e){request.overlayID='An error occured';var _isBundleComplete=true;for(var _iterator5=requestBundle.req,_isArray5=Array.isArray(_iterator5),_i5=0,_iterator5=_isArray5?_iterator5:_iterator5[Symbol.iterator]();;){var _ref6;if(_isArray5){if(_i5>=_iterator5.length)break;_ref6=_iterator5[_i5++]}else{_i5=_iterator5.next();if(_i5.done)break;_ref6=_i5.value}var _reg=_ref6;if(!_reg.overlayID){_isBundleComplete=false;break}}if(_isBundleComplete){this.isQueueLoading=false}throw e}}};LayerManager.prototype._calcRecordingExtent=function _calcRecordingExtent(){var recording=this.widget._panoramaViewer.getRecording();var featureRadius=30;//might need to change to 99 radius
var xyz=recording.xyz,srs=recording.srs;// needs support for feet.
var ext=new Extent(xyz[0]-featureRadius,xyz[1]-featureRadius,xyz[0]+featureRadius,xyz[1]+featureRadius,new SpatialReference(srs.split(':')[1]));return ext};LayerManager.prototype.removeOverlays=function removeOverlays(){var _this4=this;_.each(this.overlays,function(overlayId){_this4.api.removeOverlay(overlayId)});this.overlays=[];this.overlaysByName={}};// Doesn't need to remove the overlays from the viewer,
// as this is used when we destroy the viewer.
LayerManager.prototype.reset=function reset(){this.overlays=[];this.overlaysByName={};this.requestQueue=[];this.requestID=0;this.isQueueLoading=false;this.reloadQueueOnFinish=false};LayerManager.prototype.doesFeatureMatchCase=function doesFeatureMatchCase(feature,sldCase){if(!sldCase.filter){return true}return feature.properties[sldCase.filter.attribute]===sldCase.filter.value};// Adds the SLD_DEFAULT_CASE when a feature
// matchs none if the special cases of the SLD
LayerManager.prototype.applyDefaultCaseIfNeeded=function applyDefaultCaseIfNeeded(geojson,sld){var _this5=this;if(geojson.type==='FeatureCollection'&&sld.containsDefaultCase){var newFeatures=geojson.features.map(function(feature){var newFeature=_.cloneDeep(feature);var needsDefaultCase=true;for(var i=0;i<sld.cases.length;i++){var sldCase=sld.cases[i];var match=_this5.doesFeatureMatchCase(feature,sldCase);if(match){needsDefaultCase=false;break}}if(needsDefaultCase){newFeature.properties['SLD_DEFAULT_CASE']=1}return newFeature});geojson.features=newFeatures}return geojson};LayerManager.prototype.createGeoJsonForFeature=function createGeoJsonForFeature(_ref7){var mapLayer=_ref7.mapLayer,sld=_ref7.sld,featureSet=_ref7.featureSet,wkid=_ref7.wkid;var arcgisFeatureSet=mapLayer.toJson().featureSet;var dates=[];if(mapLayer){dates=mapLayer.fields.reduce(function(acc,field){if(field.type==='esriFieldTypeDate'){acc.push(field.name)}return acc},dates)}var features=[];var changedSpatialReference=false;for(var featureS in arcgisFeatureSet.features){var updateFeature=arcgisFeatureSet.features[featureS];var objectId=updateFeature.attributes[mapLayer.objectIdField];if(featureSet&&featureSet.features){for(var featureZ in featureSet.features){var fromFeature=featureSet.features[featureZ];if(fromFeature&&objectId===fromFeature.attributes[mapLayer.objectIdField]){if(arcgisFeatureSet.geometryType==='esriGeometryPoint'){var z=fromFeature.geometry&&fromFeature.geometry.z;if(z){updateFeature.geometry.z=z}if(!updateFeature.geometry.spatialReference||updateFeature.geometry.spatialReference.wkid!=this.config.srs.split(':')[1]){var x=fromFeature.geometry&&fromFeature.geometry.x;var y=fromFeature.geometry&&fromFeature.geometry.y;var spatialReference=featureSet.spatialReference;if(x){updateFeature.geometry.x=x}if(y){updateFeature.geometry.y=y}if(spatialReference){updateFeature.geometry.spatialReference=spatialReference}}}else if(arcgisFeatureSet.geometryType==='esriGeometryPolyline'){var paths=fromFeature.geometry&&fromFeature.geometry.paths;if(paths.length===1){var points=paths[0].slice(0);for(var point in points){var thisPoint=points[point];var _z=thisPoint&&thisPoint.length===3&&thisPoint[2];var updatePaths=updateFeature.geometry&&updateFeature.geometry.paths;if(updatePaths.length===1&&updatePaths[0][point]){if(_z){updatePaths[0][point][2]=_z}if(updateFeature.geometry.spatialReference.wkid!=this.config.srs.split(':')[1]){var _x=thisPoint&&thisPoint.length>=1&&thisPoint[0];var _y=thisPoint&&thisPoint.length>=2&&thisPoint[1];changedSpatialReference=true;if(_x){updatePaths[0][point][0]=_x}if(_y){updatePaths[0][point][1]=_y}}}else{updatePaths=[[]];updatePaths[0][point]=thisPoint}}}var _spatialReference=featureSet.spatialReference;if(_spatialReference&&changedSpatialReference){updateFeature.geometry.spatialReference=_spatialReference}}else if(arcgisFeatureSet.geometryType==='esriGeometryPolygon'){var rings=fromFeature.geometry&&fromFeature.geometry.rings;for(var ring in rings){var thisRing=rings[ring];for(var _point in thisRing){var _thisPoint=thisRing[_point];var _z2=_thisPoint&&_thisPoint.length===3&&_thisPoint[2];var updateRings=updateFeature.geometry&&updateFeature.geometry.rings;if(updateRings.length>ring&&updateRings[ring][_point]){if(_z2){updateRings[ring][_point][2]=_z2}if(updateFeature.geometry.spatialReference.wkid!=this.config.srs.split(':')[1]){var _x2=_thisPoint&&_thisPoint.length>=1&&_thisPoint[0];var _y2=_thisPoint&&_thisPoint.length>=2&&_thisPoint[1];changedSpatialReference=true;if(_x2){updateRings[ring][_point][0]=_x2}if(_y2){updateRings[ring][_point][1]=_y2}}}}}var _spatialReference2=featureSet.spatialReference;if(_spatialReference2&&changedSpatialReference){updateFeature.geometry.spatialReference=_spatialReference2}}}}}features.push(updateFeature)}arcgisFeatureSet.features=features;var geojson=geoJsonUtils.arcgisToGeoJSON(arcgisFeatureSet,undefined,dates);// Make sure the panoramaviewer knows which srs this is in.
var wkidToUse=_.get(arcgisFeatureSet,'features[0].geometry.spatialReference.wkid',null)||wkid;if(wkidToUse){wkidToUse=wkidToUse===102100?3857:wkidToUse;var crs={type:'EPSG',properties:{code:wkidToUse}};geojson.crs=crs}return geojson};return LayerManager}()});