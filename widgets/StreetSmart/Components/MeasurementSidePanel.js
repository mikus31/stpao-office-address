function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}function _possibleConstructorReturn(self,call){if(!self){throw new ReferenceError('this hasn\'t been initialised - super() hasn\'t been called')}return call&&(typeof call==='object'||typeof call==='function')?call:self}function _inherits(subClass,superClass){if(typeof superClass!=='function'&&superClass!==null){throw new TypeError('Super expression must either be null or a function, not '+typeof superClass)}subClass.prototype=Object.create(superClass&&superClass.prototype,{constructor:{value:subClass,enumerable:false,writable:true,configurable:true}});if(superClass)Object.setPrototypeOf?Object.setPrototypeOf(subClass,superClass):subClass.__proto__=superClass}define(['react','./Layer','../arcgisToGeojson'],function(React,Layer,geoUtils){return function(_React$Component){_inherits(MeasurementSidePanel,_React$Component);function MeasurementSidePanel(){_classCallCheck(this,MeasurementSidePanel);var _this=_possibleConstructorReturn(this,_React$Component.call(this));_this.state={selectedLayer:null};return _this}MeasurementSidePanel.prototype.constructLayerList=function constructLayerList(){var widget=this.props.widget;var map=widget.map;var ids=map.graphicsLayerIds;var list=[];for(var _iterator=ids,_isArray=Array.isArray(_iterator),_i=0,_iterator=_isArray?_iterator:_iterator[Symbol.iterator]();;){var _ref;if(_isArray){if(_i>=_iterator.length)break;_ref=_iterator[_i++]}else{_i=_iterator.next();if(_i.done)break;_ref=_i.value}var id=_ref;var layer=map.getLayer(id);if(layer.type==='Feature Layer'&&layer.isEditable()===true&&layer.getEditCapabilities().canCreate){list.push(layer)}}return list};MeasurementSidePanel.prototype.selectLayer=function selectLayer(id){var selectLayer=this.props.selectLayer;if(id===this.state.selectedLayer){this.setState({selectedLayer:null});selectLayer(null)}else{this.setState({selectedLayer:id});selectLayer(id)}};MeasurementSidePanel.prototype.startMeasurement=function startMeasurement(type){var _props=this.props,widget=_props.widget,togglePanel=_props.togglePanel,selectGeometryType=_props.selectGeometryType;selectGeometryType(type);widget._selectedLayerID=this.state.selectedLayer;widget.startMeasurement(type);togglePanel(false)};MeasurementSidePanel.prototype.esriGeomToGeoJson=function esriGeomToGeoJson(info){var type=info&&info.geometryType?info.geometryType:info;return geoUtils.EsriGeomTypes[type]};MeasurementSidePanel.prototype.render=function render(){var _this2=this;var layerList=this.constructLayerList();var _props2=this.props,widget=_props2.widget,togglePanel=_props2.togglePanel;var nls=widget.nls,map=widget.map;var selectedLayer=this.state.selectedLayer;var layerGeometryTypes=[];if(selectedLayer){var layer=map.getLayer(selectedLayer);layerGeometryTypes=this.esriGeomToGeoJson(layer)}else{layerGeometryTypes=[geoUtils.geomTypes.POINT,geoUtils.geomTypes.LINE,geoUtils.geomTypes.POLYGON,geoUtils.geomTypes.ORTHOGONAL,geoUtils.geomTypes.HEIGHT]}var measureStyle={marginLeft:0,display:'flex',flexDirection:'column',textAlign:'center'};//GC: changed the styling for the measurement buttons to allow for captions underneath
//GC: Added additional measurement options
return React.createElement('div',{id:'measurementPanel'},React.createElement('div',{className:'cmt close-button'},React.createElement('button',{id:'side-panel-close-button',className:'close-button glyphicon novaicon-navigation-down-3',onClick:function onClick(){return togglePanel(false)}})),React.createElement('div',{className:'layers-list'},layerList.map(function(l){var isSelected=_this2.state.selectedLayer===l.id;return React.createElement(Layer,{layer:l,isSelected:isSelected,selectLayer:function selectLayer(){_this2.selectLayer(l.id)}})})),React.createElement('div',{className:'measurement-types-list',role:'toolbar'},React.createElement('p',{style:{fontWeight:'bold',fontSize:15,fontFamily:'Arial',marginBottom:2}},nls.startMeasurement),React.createElement('div',{className:'cmt measurement-button-container'},React.createElement('div',null,React.createElement('button',{className:'measurement-button glyphicon novaicon-custom-dot',disabled:!layerGeometryTypes.includes(geoUtils.geomTypes.POINT),onClick:function onClick(){_this2.startMeasurement(geoUtils.geomTypes.POINT)}}),React.createElement('span',null,'  Location')),React.createElement('div',null,React.createElement('button',{className:'measurement-button glyphicon novaicon-organization-graph',disabled:!layerGeometryTypes.includes(geoUtils.geomTypes.LINE),onClick:function onClick(){_this2.startMeasurement(geoUtils.geomTypes.LINE)}}),React.createElement('span',null,'  Distance')),React.createElement('div',null,React.createElement('button',{className:'measurement-button glyphicon novaicon-organization-flowchart-1',disabled:!layerGeometryTypes.includes(geoUtils.geomTypes.POLYGON),onClick:function onClick(){_this2.startMeasurement(geoUtils.geomTypes.POLYGON)}}),React.createElement('span',null,'  Surface')),React.createElement('div',null,React.createElement('button',{className:'measurement-button glyphicon novaicon-ruler-2',disabled:!layerGeometryTypes.includes(geoUtils.geomTypes.ORTHOGONAL),onClick:function onClick(){_this2.startMeasurement(geoUtils.geomTypes.ORTHOGONAL)}}),React.createElement('span',null,'  Orthogonal')),React.createElement('div',null,React.createElement('button',{className:'measurement-button glyphicon novaicon-cursor-move-up-1',disabled:!layerGeometryTypes.includes(geoUtils.geomTypes.HEIGHT),onClick:function onClick(){_this2.startMeasurement(geoUtils.geomTypes.HEIGHT)}}),React.createElement('span',null,'  Height')))))};return MeasurementSidePanel}(React.Component)});