function _classCallCheck(instance,Constructor){if(!(instance instanceof Constructor)){throw new TypeError('Cannot call a class as a function')}}define(['dojo/_base/Color','dojo/on','esri/geometry/Point','esri/geometry/Polygon','esri/geometry/ScreenPoint','esri/graphic','esri/symbols/SimpleMarkerSymbol','esri/symbols/SimpleLineSymbol','esri/symbols/SimpleFillSymbol','esri/renderers/SimpleRenderer','esri/renderers/UniqueValueRenderer','esri/layers/FeatureLayer','esri/layers/GraphicsLayer','esri/SpatialReference','./utils','esri/layers/WebTiledLayer'],function(Color,on,Point,Polygon,ScreenPoint,Graphic,SimpleMarkerSymbol,SimpleLineSymbol,SimpleFillSymbol,SimpleRenderer,UniqueValueRenderer,FeatureLayer,GraphicsLayer,SpatialReference,utils,WebTiledLayer){return function(){function LayerManager(_ref){var map=_ref.map,wkid=_ref.wkid,onRecordingLayerClick=_ref.onRecordingLayerClick,addEventListener=_ref.addEventListener,removeEventListener=_ref.removeEventListener,setPanoramaViewerOrientation=_ref.setPanoramaViewerOrientation,config=_ref.config,nls=_ref.nls;_classCallCheck(this,LayerManager);this._recordingColor=new Color.fromString('#80B0FF');this._recordingColorDepth=new Color.fromString('#98C23C');this._historicRecording=new Color.fromString('#FF8D29');this._defaultColor=new Color.fromString('#D6D6D6');this.map=map;this.wkid=wkid;this.nls=nls;this.config=config;this.addEventListener=addEventListener;this.removeEventListener=removeEventListener;this.setPanoramaViewerOrientation=setPanoramaViewerOrientation;this.recordingLayer=this._createRecordingLayer({onClick:onRecordingLayerClick});this.viewingConeLayer=this._createViewingConeLayer();this.measureLayer=this._createMeasureLayer();this.coverageLayer=this._createCoverageLayer();this.srs=new SpatialReference({wkid:wkid})}LayerManager.prototype.addLayers=function addLayers(){this.map.addLayer(this.recordingLayer);this.map.addLayer(this.viewingConeLayer);this.addEventListener(this.viewingConeLayer,'mouse-down',this.startConeInteraction.bind(this));this.map.addLayer(this.measureLayer);this.map.addLayer(this.coverageLayer)};LayerManager.prototype.removeLayers=function removeLayers(){this.recordingLayer.clear();this.viewingConeLayer.clear();this.measureLayer.clear();this.map.removeLayer(this.recordingLayer);this.map.removeLayer(this.viewingConeLayer);this.map.removeLayer(this.measureLayer);this.map.removeLayer(this.coverageLayer)};LayerManager.prototype.updateRecordings=function updateRecordings(recordingData){var _this=this;this.recordingLayer.clear();recordingData.map(function(data){var coord=new Point(data.xyz[0],data.xyz[1],_this.srs);//GC: created a new variable to show if the current recordings are historic or not
if(data.expiredAt){data.isHistoric=true}else{data.isHistoric=false}var graphic=new Graphic(coord,null,{recordingId:data.id,hasDepthMap:data.hasDepthMap,isHistoric:data.isHistoric});_this.recordingLayer.add(graphic)})};LayerManager.prototype.startConeInteraction=function startConeInteraction(e){this.map.disablePan();this._coneDragListener=this.addEventListener(this.map,'mouse-drag',this._handleConeMoved.bind(this));this._coneDragEndListener=this.addEventListener(this.map,'mouse-drag-end',this.stopConeInteraction.bind(this))};LayerManager.prototype.stopConeInteraction=function stopConeInteraction(){this.map.enablePan();this.removeEventListener(this._coneDragListener);this.removeEventListener(this._coneDragEndListener)};LayerManager.prototype._handleConeMoved=function _handleConeMoved(e){var yaw=this._calcYaw(this._currentPanoramaViewerPosition,e.mapPoint);var orientation={yaw:yaw};this.setPanoramaViewerOrientation(orientation)};LayerManager.prototype._calcYaw=function _calcYaw(pt1,pt2){var yDiff=pt2.y-pt1.y;var xDiff=pt2.x-pt1.x;var radians=Math.atan2(yDiff,xDiff);var angle=radians*180/Math.PI;return 90-angle};LayerManager.prototype._createRecordingSymbol=function _createRecordingSymbol(color){var outlinecolor=arguments.length>1&&arguments[1]!==undefined?arguments[1]:[255,255,255];var outline=new SimpleLineSymbol(SimpleLineSymbol.STYLE_SOLID,new Color(outlinecolor),1);return new SimpleMarkerSymbol({style:'circle',color:color,size:11,outline:outline})};LayerManager.prototype._getRecordingLayerId=function _getRecordingLayerId(){var nameByLocale={'fr':'Calque Enregistrement Cyclorama','de':'Cyclorama Aufnahmeorte','nl':'Cyclorama Opnamelocaties','en-US':'Cyclorama Recording Layer','en-EN':'Cyclorama Recording Layer'};var id=nameByLocale[this.config.locale];var fromNls=this.nls.recordingLayerName;return fromNls||id||nameByLocale['en-US']};LayerManager.prototype._createRecordingLayer=function _createRecordingLayer(_ref2){var onClick=_ref2.onClick;var recordingCollection={layerDefinition:{geometryType:'esriGeometryPoint',fields:[{name:'id',alias:'ID',type:'esriFieldTypeOID'}]},featureSet:null};//GC: added historic attribute to the render creator
var renderer=new UniqueValueRenderer(this._createRecordingSymbol(this._defaultColor),'hasDepthMap','isHistoric',null,':');//GC: Shows recent recordings that were created with depth
renderer.addValue({value:'true:false',symbol:this._createRecordingSymbol(this._recordingColorDepth),label:'New Recording',description:'Recent recordings that were created with depth'});//GC: only shows blue recordings if the point has no depth and is not historic
renderer.addValue({value:'false:false',symbol:this._createRecordingSymbol(this._recordingColor),label:'No Depth Recording',description:'Recordings that were created with no depth'});//GC: added a new value that is only used when the historic attribute is true
renderer.addValue({value:'false:true',symbol:this._createRecordingSymbol(this._historicRecording),label:'Historic Recording',description:'Archived recordings that were created previously'});//GC: shows historic recording even if the point has no depth
renderer.addValue({value:'true:true',symbol:this._createRecordingSymbol(this._historicRecording),label:'Historic Recording',description:'Archived recordings that were created previously'});var layer=new FeatureLayer(recordingCollection,{id:this._getRecordingLayerId()});layer.setRenderer(renderer);on(layer,'click',onClick);return layer};LayerManager.prototype._getViewingConeLayerId=function _getViewingConeLayerId(){var nameByLocale={'fr':'Calque Visualisation C\xF4nique','de':'Betrachtungskoni','nl':'Kijkhoeken','en-US':'Viewing Cone Layer','en-EN':'Viewing Cone Layer'};var id=nameByLocale[this.config.locale];var fromNls=this.nls.viewingConeLayerName;return fromNls||id||nameByLocale['en-US']};LayerManager.prototype._createViewingConeLayer=function _createViewingConeLayer(){var viewingConeCollection={layerDefinition:{geometryType:'esriGeometryNull',fields:[{name:'id',alias:'ID',type:'esriFieldTypeOID'}]},featureSet:null};var layer=new FeatureLayer(viewingConeCollection,{id:this._getViewingConeLayerId()});return layer};//GC: creating the cyclorama coverage map and adding it to the layer list
LayerManager.prototype._createCoverageLayer=function _createCoverageLayer(){var layer=new WebTiledLayer('https://atlas.cyclomedia.com/webmercator/cycloramas/{z}/{x}/{y}.png',{'id':'CycloramaCoverage','maxScale':5,'opacity':0.75});return layer};LayerManager.prototype._getMeasureLayerId=function _getMeasureLayerId(){var nameByLocale={'fr':'Mesures','de':'Messungen','nl':'Metingen','en-US':'Measurements','en-EN':'Measurements'};var id=nameByLocale[this.config.locale];var fromNls=this.nls.measurementLayerName;return fromNls||id||nameByLocale['en-US']};LayerManager.prototype._createMeasureLayer=function _createMeasureLayer(){var measureCollection={layerDefinition:{geometryType:'esriGeometryPoint',fields:[{name:'id',alias:'ID',type:'esriFieldTypeOID'}]},featureSet:null};var measureSymbol=new SimpleMarkerSymbol;measureSymbol.setStyle(SimpleMarkerSymbol.STYLE_CROSS);measureSymbol.setAngle(47);var renderer=new SimpleRenderer(measureSymbol);var layer=new FeatureLayer(measureCollection,{id:this._getMeasureLayerId()});layer.setRenderer(renderer);return layer};LayerManager.prototype.updateViewingCone=function updateViewingCone(panoramaViewer){var recording=panoramaViewer.getRecording();if(!recording||!recording.xyz){return}var x=recording.xyz[0];var y=recording.xyz[1];if(!x||!y){return}this.viewingConeLayer.clear();var viewerColor=new Color.fromArray(panoramaViewer.getViewerColor());var coord=new Point(x,y,this.srs);// Transform local SRS to Web Mercator:
var coordLocal=utils.transformProj4js(coord,this.map.spatialReference.wkid);// Street Smart API returns orientation in degrees.
var _panoramaViewer$getOr=panoramaViewer.getOrientation(),yaw=_panoramaViewer$getOr.yaw,hFov=_panoramaViewer$getOr.hFov;// we need to use it in radians.
yaw=utils.toRadians(yaw);hFov=utils.toRadians(hFov);var factor=70;var hhFov=hFov*0.5;var leftFovX=Math.sin(yaw-hhFov)*factor;var leftFovY=-Math.cos(yaw-hhFov)*factor;var rightFovX=Math.sin(yaw+hhFov)*factor;var rightFovY=-Math.cos(yaw+hhFov)*factor;var mapPt=new Point(coordLocal.x,coordLocal.y,this.map.spatialReference);var cPt=this.map.toScreen(mapPt);this._currentPanoramaViewerPosition=mapPt;var a=this.map.toMap(new ScreenPoint(cPt.x,cPt.y));var b=this.map.toMap(new ScreenPoint(cPt.x+leftFovX,cPt.y+leftFovY));var c=this.map.toMap(new ScreenPoint(cPt.x+rightFovX,cPt.y+rightFovY));var d=this.map.toMap(new ScreenPoint(cPt.x,cPt.y));var activeRecordingSymbol=new SimpleMarkerSymbol({style:'circle',color:viewerColor,size:11});var centerDot=new Graphic(mapPt,activeRecordingSymbol);this.viewingConeLayer.add(centerDot);var outline=new SimpleLineSymbol(SimpleLineSymbol.STYLE_NULL,new Color(0,0,0,1),2);var symbol=new SimpleFillSymbol(SimpleFillSymbol.STYLE_SOLID,outline,viewerColor);var polygon=new Polygon(this.map.spatialReference);polygon.addRing([[a.x,a.y],[b.x,b.y],[c.x,c.y],[d.x,d.y],[a.x,a.y]]);var graphic=new Graphic(polygon,symbol);this.viewingConeLayer.add(graphic);this.viewingConeLayer.setVisibility(true)};return LayerManager}()});